---
// Dependencies
import { getCollection, render } from 'astro:content';

// Services
import ImageService from '~/services/ImageService';

// Layout
import Layout from '~/layouts/Layout.astro';

//Sections
import Main from '~/section/Main.astro';

// Atoms
import Button from '~/atoms/Button.astro';

export async function getStaticPaths() {
  const posts = await getCollection('culture');
  return posts.map((post) => {
    const [category, slug] = post.slug.split('/');

    return {
      params: { id: slug, category },
      props: { post },
    };
  });
}

const { post } = Astro.props;
const {
  body,
  data: { images },
} = post;

const imageList = ImageService.parseImageList(body);
---

<Layout asideScroll={true}>
  <Main class="flex-row gap-4">
    <div class="bg-theme-black relative min-h-full max-w-1/2 min-w-1/2">
      <Button
        href="/culture"
        class="absolute top-0 right-0 z-10"
        id="backButton"
      >
        [Back]
      </Button>
      <div
        class="relative z-0 flex min-h-full w-full max-w-full min-w-full flex-row flex-nowrap overflow-hidden object-cover"
      >
        {
          imageList.map((image, index) => {
            const { url, slug, alt } = image;
            const imageData = images?.[index];
            const authorData = imageData?.author;
            const showInfo = Boolean(
              imageData?.src && authorData?.name && authorData?.profile,
            );

            return (
              <>
                <div
                  class="relative flex items-end justify-end overflow-hidden"
                  class:list={{
                    active: index === 0,
                  }}
                  data-main-image
                  data-index={index}
                  id={`main-${slug}`}
                >
                  <img src={url} alt={alt} class="opacity-50" />
                </div>

                {showInfo && (
                  <div
                    class="image-info align-right text-theme-black bg-theme-white absolute right-0 bottom-0 z-10 mb-4 inline-block h-fit w-auto pt-1 pr-4 pb-1 pl-4"
                    data-info-main-image={index}
                    class:list={{
                      active: index === 0,
                    }}
                  >
                    Photo from{' '}
                    <a
                      target="_blank"
                      href={authorData.profile}
                      class="hover:text-theme-main"
                    >
                      {authorData.name}
                    </a>{' '}
                    at{' '}
                    <a
                      target="_blank"
                      class="hover:text-theme-main"
                      href={imageData.src}
                    >
                      Unsplash
                    </a>
                  </div>
                )}
              </>
            );
          })
        }) }
      </div>
    </div>
    <article
      class="hidden-scrollbar w-full overflow-auto p-0"
      id="scroll-section"
    >
      <h1 class="font-oswald text-8xl">
        {post.data.title}
      </h1>
      <h2 class="font-oswald text-5xl">{post.data.subtitle}</h2>
      <p class="text-theme-main mb-8">[{post.data.date}]</p>
      <div id="content-wrapper">
        {
          imageList.map((image) => {
            const { url, slug, alt } = image;

            return (
              <img
                src={url}
                id={slug}
                alt={alt}
                data-carrousell-image
                class="cursor-pointer"
              />
            );
          })
        }
      </div>
    </article>
  </Main>
</Layout>

<style>
  article {
    h3 {
      color: var(--color-theme-main);
      font-size: calc(var(--spacing) * 6);
      font-weight: bold;
    }

    h4 {
      em {
        color: var(--color-gray-700);
        font-size: calc(var(--spacing) * 6);
      }
    }

    #content-wrapper {
      display: grid;
      grid-template-columns: repeat(
        auto-fit,
        minmax(calc(var(--spacing) * 70), 1fr)
      );
      gap: calc(var(--spacing) * 4);
      img {
        aspect-ratio: 1;
        width: 100%;
        object-fit: cover;
      }
    }
  }

  div[data-main-image] {
    position: absolute;
    transform: translateX(100%);
    height: 100dvh;
    width: 100%;
    min-height: 100dvh;
    transition: 0.5s ease-in-out;

    &.left {
      transform: translateX(-100%);
    }
    &.right {
      transform: translateX(100%);
    }
    img {
      min-height: 100%;
      object-fit: cover;
      min-width: 100%;
    }
    &.active {
      transform: translate(0%);
      .image-info {
        opacity: 100;
      }
    }
  }

  div[data-info-main-image] {
    opacity: 0;
    transition: 0.3s ease-in-out;
    &.active {
      opacity: 100%;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const history = window.history;
    const backButton = document.getElementById('backButton');

    backButton?.addEventListener('click', (event) => {
      history.back();
    });
  });
</script>

<script>
  document.addEventListener('astro:page-load', () => {
    const { pathname } = window.location;
    const [root, collection, category, slug] = pathname.split('/');

    if (category === 'lookbooks') {
      const carrouselImages = document.querySelectorAll(
        'img[data-carrousell-image]',
      ) as NodeListOf<HTMLImageElement>;
      const mainImages = document.querySelectorAll(
        'div[data-main-image]',
      ) as NodeListOf<HTMLElement>;
      const mainImagesInfo = document.querySelectorAll(
        `div[data-info-main-image]`,
      ) as NodeListOf<HTMLElement>;

      if (!mainImages)
        throw new Error("Couldn't find the main image of the page");
      if (!carrouselImages)
        throw new Error("Couldn't find any images on the page");

      carrouselImages.forEach((image) => {
        image.addEventListener('click', (event) => {
          const img = event.currentTarget as HTMLImageElement;
          const mainImage = Array.from(mainImages).find(
            (node) => node.id === `main-${img.id}`,
          );

          if (!mainImage) {
            throw new Error('Error getting the main image');
          }

          mainImages.forEach((node) => {
            node.classList.remove('active');

            if (!node.dataset.index || !mainImage.dataset.index) {
              throw new Error('Error getting an image');
            }

            node.classList.add(
              node?.dataset.index < mainImage.dataset.index ? 'left' : 'right',
            );
            node.classList.remove(
              node.dataset.index > mainImage.dataset.index ? 'left' : 'right',
            );
          });

          mainImagesInfo.forEach((node) => {
            node.classList.remove('active');
            if (node.dataset.infoMainImage === mainImage.dataset.index) {
              node.classList.add('active');
            }
          });

          mainImage?.classList.add('active');
        });
      });
    }
  });
</script>
